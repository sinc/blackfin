
AVRASM ver. 1.52  main.asm Wed Nov 21 10:38:08 2012


         ;CodeVisionAVR C Compiler V1.24.4 Standard
         ;(C) Copyright 1998-2004 Pavel Haiduc, HP InfoTech s.r.l.
         ;http://www.hpinfotech.com
         ;e-mail:office@hpinfotech.com
         
         ;Chip type           : ATmega16
         ;Program type        : Application
         ;Clock frequency     : 12,000000 MHz
         ;Memory model        : Small
         ;Optimize for        : Size
         ;(s)printf features  : int, width
         ;(s)scanf features   : int, width
         ;External SRAM size  : 0
         ;Data Stack size     : 256 byte(s)
         ;Heap size           : 0 byte(s)
         ;Promote char to int : No
         ;char is unsigned    : Yes
         ;8 bit enums         : Yes
         ;Enhanced core instructions    : On
         ;Automatic register allocation : On
         
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU GICR=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x40
          	.EQU __sm_mask=0xB0
          	.EQU __sm_adc_noise_red=0x10
          	.EQU __sm_powerdown=0x20
          	.EQU __sm_powersave=0x30
          	.EQU __sm_standby=0xA0
          	.EQU __sm_ext_standby=0xB0
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	LDI  R30,0
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTBRM
          	LDI  R@0,LOW(@1)
          	.ENDM
         
          	.MACRO __POINTWRM
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __POINTBRMN
          	LDI  R@0,LOW(@1+@2)
          	.ENDM
         
          	.MACRO __POINTWRMN
          	LDI  R@0,LOW(@2+@3)
          	LDI  R@1,HIGH(@2+@3)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETWRZ
          	LDD  R@0,Z+@2
          	LDD  R@1,Z+@2+1
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTDZ2
          	STD  Z+@0,R26
          	STD  Z+@0+1,R27
          	STD  Z+@0+2,R24
          	STD  Z+@0+3,R25
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __PUTBZR
          	STD  Z+@1,R@0
          	.ENDM
         
          	.MACRO __PUTWZR
          	STD  Z+@2,R@0
          	STD  Z+@2+1,R@1
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	CALL __GETW1PF
          	ICALL
          	.ENDM
         
         
          	.MACRO __CALL2EN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	CALL __EEPROMRDW
          	ICALL
          	.ENDM
         
         
          	.MACRO __GETW1STACK
          	IN   R26,SPL
          	IN   R27,SPH
          	ADIW R26,@0+1
          	LD   R30,X+
          	LD   R31,X
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RN
          	MOVW R26,R@0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RNS
          	MOVW R26,R@0
          	ADIW R26,@1
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RON
          	MOV  R26,R@0
          	MOV  R27,R@1
          	SUBI R26,LOW(-@2)
          	SBCI R27,HIGH(-@2)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1RONS
          	MOV  R26,R@0
          	MOV  R27,R@1
          	ADIW R26,@2
          	CALL __PUTDP1
          	.ENDM
         
         
          	.MACRO __GETB1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOVW R30,R0
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOVW R26,R0
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __MULBRR
          	MULS R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __MULBRRU
          	MUL  R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "main.vec"
         
         ;INTERRUPT VECTORS
000000 940c 002d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 005d 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
         
          	.INCLUDE "main.inc"
          	.DEF _g_bRxBuffWritePosition=R4
          	.DEF _g_bRxBuffReadPosition=R5
          	.DEF _g_uRxCount=R6
          _0x56:
          	.DB  0x0,0x0
00002a 0000
          	.DB  0x0,0x0
00002b 0000
         
          __GLOBAL_INI_TBL:
          	.DW  0
00002c 0000
         
          __RESET:
00002d 94f8      	CLI
00002e 27ee      	CLR  R30
00002f bbec      	OUT  EECR,R30
         
         ;INTERRUPT VECTORS ARE PLACED
         ;AT THE START OF FLASH
000030 e0f1      	LDI  R31,1
000031 bffb      	OUT  GICR,R31
000032 bfeb      	OUT  GICR,R30
000033 bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
000034 e1f8      	LDI  R31,0x18
000035 bdf1      	OUT  WDTCR,R31
000036 bde1      	OUT  WDTCR,R30
         
         ;CLEAR R2-R14
000037 e08d      	LDI  R24,13
000038 e0a2      	LDI  R26,2
000039 27bb      	CLR  R27
          __CLEAR_REG:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
00003d e080      	LDI  R24,LOW(0x400)
00003e e094      	LDI  R25,HIGH(0x400)
00003f e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
000040 93ed      	ST   X+,R30
000041 9701      	SBIW R24,1
000042 f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
000043 e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000044 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
000045 9185      	LPM  R24,Z+
000046 9195      	LPM  R25,Z+
000047 9700      	SBIW R24,0
000048 f061      	BREQ __GLOBAL_INI_END
000049 91a5      	LPM  R26,Z+
00004a 91b5      	LPM  R27,Z+
00004b 9005      	LPM  R0,Z+
00004c 9015      	LPM  R1,Z+
00004d 01bf      	MOVW R22,R30
00004e 01f0      	MOVW R30,R0
          __GLOBAL_INI_LOOP:
00004f 9005      	LPM  R0,Z+
000050 920d      	ST   X+,R0
000051 9701      	SBIW R24,1
000052 f7e1      	BRNE __GLOBAL_INI_LOOP
000053 01fb      	MOVW R30,R22
000054 cff0      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
000055 e5ef      	LDI  R30,LOW(0x45F)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(0x45F)
000058 bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
000059 e6c0      	LDI  R28,LOW(0x160)
00005a e0d1      	LDI  R29,HIGH(0x160)
         
00005b 940c 01cb 	JMP  _main
         
          	.ESEG
          	.ORG 0
         
          	.DSEG
          	.ORG 0x160
         ;       1 /*++
         ;       2 
         ;       3 Copyright (c) 2012 RPHIS
         ;       4 
         ;       5 Module Name:
         ;       6 
         ;       7     main.c 
         ;       8 
         ;       9 Abstract:
         ;      10 
         ;      11     Firmware for Blackfin loader
         ;      12 
         ;      13 Environment:
         ;      14 
         ;      15     kernel mode
         ;      16 
         ;      17 Notes:
         ;      18 	SPI memory driver
         ;      19     Chip type           : ATmega16
         ;      20     Program type        : Application
         ;      21     Clock frequency     : 12,000000 MHz
         ;      22     Memory model        : Small
         ;      23     External SRAM size  : 0
         ;      24     Data Stack size     : 256
         ;      25 	
         ;      26 Revision History:
         ;      27 
         ;      28     09/11/12: created
         ;      29 
         ;      30 --*/
         ;      31 
         ;      32 #include <mega16.h>
         ;      33 #include <stdio.h>
         ;      34 #include <delay.h>
         ;      35 
         ;      36 #define CY  SREG.0
         ;      37 #define SCK PORTC.1
         ;      38 #define SI  PINC.3
         ;      39 #define SO  PORTC.2
         ;      40 #define CS  PORTC.0
         ;      41 
         ;      42 #define PRGE    PIND.3
         ;      43 #define PRGSET  PORTD.5
         ;      44 #define RESET   PORTC.5
         ;      45 #define LNE     PORTC.4
         ;      46 
         ;      47 #define SPI_TX(cnt, count, data)				\
         ;      48 	do { for (cnt = 0; cnt < (count); ++cnt) { 	\
         ;      49 	    (data) <<= 1;							\
         ;      50 	    SO = CY;								\
         ;      51 	    SCK = 1;								\
         ;      52 	    #asm("nop");							\
         ;      53 		SCK = 0; }								\
         ;      54 	} while(0)
         ;      55 
         ;      56 #define RXB8    1
         ;      57 #define TXB8    0
         ;      58 #define UPE     2
         ;      59 #define OVR     3
         ;      60 #define FE      4
         ;      61 #define UDRE    5
         ;      62 #define RXC     7
         ;      63 
         ;      64 #define FRAMING_ERROR		(1 << FE)
         ;      65 #define PARITY_ERROR		(1 << UPE)
         ;      66 #define DATA_OVERRUN		(1 << OVR)
         ;      67 #define DATA_REGISTER_EMPTY	(1<< UDRE)
         ;      68 #define RX_COMPLETE			(1 << RXC)
         ;      69 
         ;      70 #define RX_BUFFER_LEN 128
         ;      71 
         ;      72 //enums
         ;      73 typedef enum {
         ;      74     LC_ERASE			= 0x10,
         ;      75     LC_LOAD				= 0x11,
         ;      76 	LC_RESET_CHIP		= 0x12,
         ;      77 	LC_BLANK_CHECKING	= 0x13,
         ;      78 	LC_READ				= 0x14
         ;      79 } loaderCommands;
         ;      80 
         ;      81 //globals
         ;      82 unsigned char g_pbRxBuffer[RX_BUFFER_LEN];
          _g_pbRxBuffer:
000160      	.BYTE 0x80
         ;      83 unsigned char g_bRxBuffWritePosition = 0; 
         ;      84 unsigned char g_bRxBuffReadPosition = 0;
         ;      85 unsigned int g_uRxCount = 0;
         ;      86 
         ;      87 interrupt [USART_RXC]
         ;      88 void
         ;      89 usart_rx_isr(
         ;      90     void
         ;      91 )
         ;      92 /*++
         ;      93    USART Receiver interrupt service routine
         ;      94 --*/
         ;      95 {
         
          	.CSEG
          _usart_rx_isr:
00005d 93aa      	ST   -Y,R26
00005e 93ba      	ST   -Y,R27
00005f 93ea      	ST   -Y,R30
000060 93fa      	ST   -Y,R31
000061 b7ef      	IN   R30,SREG
000062 93ea      	ST   -Y,R30
         ;      96     char status, data;
         ;      97     status = UCSRA;
000063 931a      	ST   -Y,R17
000064 930a      	ST   -Y,R16
         ;	status -> R16
         ;	data -> R17
000065 b10b      	IN   R16,11
         ;      98     data = UDR;
000066 b11c      	IN   R17,12
         ;      99     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {    
000067 2fe0      	MOV  R30,R16
000068 71ec      	ANDI R30,LOW(0x1C)
000069 f471      	BRNE _0x3
         ;     100         g_pbRxBuffer[g_bRxBuffWritePosition] = data;
00006a 2da4      	MOV  R26,R4
00006b e0b0      	LDI  R27,0
00006c 5aa0      	SUBI R26,LOW(-_g_pbRxBuffer)
00006d 4fbe      	SBCI R27,HIGH(-_g_pbRxBuffer)
00006e 931c      	ST   X,R17
         ;     101         ++g_uRxCount;
00006f e0e1      	LDI  R30,LOW(1)
000070 e0f0      	LDI  R31,HIGH(1)
000071   +  	__ADDWRR 6,7,30,31
         ;     102         if (++g_bRxBuffWritePosition == RX_BUFFER_LEN) {
000073 9443      	INC  R4
000074 e8e0      	LDI  R30,LOW(128)
000075 15e4      	CP   R30,R4
000076 f409      	BRNE _0x4
         ;     103             g_bRxBuffWritePosition = 0;
000077 2444      	CLR  R4
         ;     104         }
         ;     105     };
          _0x4:
          _0x3:
         ;     106 }
000078 9109      	LD   R16,Y+
000079 9119      	LD   R17,Y+
00007a 91e9      	LD   R30,Y+
00007b bfef      	OUT  SREG,R30
00007c 91f9      	LD   R31,Y+
00007d 91e9      	LD   R30,Y+
00007e 91b9      	LD   R27,Y+
00007f 91a9      	LD   R26,Y+
000080 9518      	RETI
         ;     107 
         ;     108 void
         ;     109 flushRxBuffer(
         ;     110 )
         ;     111 {
          _flushRxBuffer:
         ;     112     #asm("cli");
000081 94f8      	cli
         ;     113     g_uRxCount = 0;
000082 2466      	CLR  R6
000083 2477      	CLR  R7
         ;     114     g_bRxBuffWritePosition = 0;
000084 2444      	CLR  R4
         ;     115 	g_bRxBuffReadPosition = 0;
000085 2455      	CLR  R5
         ;     116     #asm("sei");   
000086 9478      	sei
         ;     117 }
000087 9508      	RET
         ;     118 
         ;     119 char
         ;     120 receiveByte(
         ;     121 )
         ;     122 {
          _receiveByte:
         ;     123     char result;
         ;     124     while (g_uRxCount <= g_bRxBuffReadPosition);
000088 930a      	ST   -Y,R16
         ;	result -> R16
          _0x5:
000089 2de5      	MOV  R30,R5
00008a   +  	__GETW2R 6,7
00008c e0f0      	LDI  R31,0
00008d 17ea      	CP   R30,R26
00008e 07fb      	CPC  R31,R27
00008f f7c8      	BRSH _0x5
         ;     125     result = g_pbRxBuffer[g_bRxBuffReadPosition];
000090 2de5      	MOV  R30,R5
000091 e0f0      	LDI  R31,0
000092 5ae0      	SUBI R30,LOW(-_g_pbRxBuffer)
000093 4ffe      	SBCI R31,HIGH(-_g_pbRxBuffer)
000094 8100      	LD   R16,Z
         ;     126     if (++g_bRxBuffReadPosition == RX_BUFFER_LEN) {
000095 9453      	INC  R5
000096 e8e0      	LDI  R30,LOW(128)
000097 15e5      	CP   R30,R5
000098 f429      	BRNE _0x8
         ;     127         g_bRxBuffReadPosition = 0;
000099 2455      	CLR  R5
         ;     128         g_uRxCount -= RX_BUFFER_LEN;
00009a e8e0      	LDI  R30,LOW(128)
00009b e0f0      	LDI  R31,HIGH(128)
00009c   +  	__SUBWRR 6,7,30,31
         ;     129     }
         ;     130     return result;
          _0x8:
00009e 2fe0      	MOV  R30,R16
00009f 9109      	LD   R16,Y+
0000a0 9508      	RET
         ;     131 }
         ;     132  
         ;     133 inline
         ;     134 void
         ;     135 init(
         ;     136 )
         ;     137 {
          _init:
         ;     138     PORTA=0x00;
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bbeb      	OUT  0x1B,R30
         ;     139     DDRA=0x00; 
0000a3 bbea      	OUT  0x1A,R30
         ;     140     PORTB=0x00;
0000a4 bbe8      	OUT  0x18,R30
         ;     141     DDRB=0x00;
0000a5 bbe7      	OUT  0x17,R30
         ;     142     
         ;     143     PORTC=0x00;
0000a6 bbe5      	OUT  0x15,R30
         ;     144     DDRC=0x37;  //3B
0000a7 e3e7      	LDI  R30,LOW(55)
0000a8 bbe4      	OUT  0x14,R30
         ;     145 
         ;     146     PORTD=0x00;
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa bbe2      	OUT  0x12,R30
         ;     147     DDRD=0x70;
0000ab e7e0      	LDI  R30,LOW(112)
0000ac bbe1      	OUT  0x11,R30
         ;     148 
         ;     149     TCCR0=0x00;
0000ad e0e0      	LDI  R30,LOW(0)
0000ae bfe3      	OUT  0x33,R30
         ;     150     TCNT0=0x00;
0000af bfe2      	OUT  0x32,R30
         ;     151     OCR0=0x00;
0000b0 bfec      	OUT  0x3C,R30
         ;     152    
         ;     153     TCCR1A=0x00;
0000b1 bdef      	OUT  0x2F,R30
         ;     154     TCCR1B=0x00;
0000b2 bdee      	OUT  0x2E,R30
         ;     155     TCNT1H=0x00;
0000b3 bded      	OUT  0x2D,R30
         ;     156     TCNT1L=0x00;
0000b4 bdec      	OUT  0x2C,R30
         ;     157     ICR1H=0x00;
0000b5 bde7      	OUT  0x27,R30
         ;     158     ICR1L=0x00;
0000b6 bde6      	OUT  0x26,R30
         ;     159     OCR1AH=0x00;
0000b7 bdeb      	OUT  0x2B,R30
         ;     160     OCR1AL=0x00;
0000b8 bdea      	OUT  0x2A,R30
         ;     161     OCR1BH=0x00;
0000b9 bde9      	OUT  0x29,R30
         ;     162     OCR1BL=0x00;
0000ba bde8      	OUT  0x28,R30
         ;     163 
         ;     164     ASSR=0x00;
0000bb bde2      	OUT  0x22,R30
         ;     165     TCCR2=0x00;
0000bc bde5      	OUT  0x25,R30
         ;     166     TCNT2=0x00;
0000bd bde4      	OUT  0x24,R30
         ;     167     OCR2=0x00;
0000be bde3      	OUT  0x23,R30
         ;     168 
         ;     169     MCUCR=0x00;
0000bf bfe5      	OUT  0x35,R30
         ;     170     MCUCSR=0x00;
0000c0 bfe4      	OUT  0x34,R30
         ;     171    
         ;     172     TIMSK=0x00;
0000c1 bfe9      	OUT  0x39,R30
         ;     173 
         ;     174     // USART initialization
         ;     175     // Communication Parameters: 8 Data, 1 Stop, No Parity
         ;     176     // USART Receiver: On
         ;     177     // USART Transmitter: On
         ;     178     // USART Mode: Asynchronous
         ;     179     // USART Baud rate: 19200
         ;     180     UCSRA=0x00;
0000c2 b9eb      	OUT  0xB,R30
         ;     181     UCSRB=0x98;
0000c3 e9e8      	LDI  R30,LOW(152)
0000c4 b9ea      	OUT  0xA,R30
         ;     182     UCSRC=0x86;
0000c5 e8e6      	LDI  R30,LOW(134)
0000c6 bde0      	OUT  0x20,R30
         ;     183     UBRRH=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bde0      	OUT  0x20,R30
         ;     184     UBRRL=0x26;
0000c9 e2e6      	LDI  R30,LOW(38)
0000ca b9e9      	OUT  0x9,R30
         ;     185 
         ;     186     ACSR=0x80;
0000cb e8e0      	LDI  R30,LOW(128)
0000cc b9e8      	OUT  0x8,R30
         ;     187     SFIOR=0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe0      	OUT  0x30,R30
         ;     188     
         ;     189     SCK = 0;
0000cf 98a9      	CBI  0x15,1
         ;     190     PRGSET = 1;
0000d0 9a95      	SBI  0x12,5
         ;     191     LNE = 1;
0000d1 9aac      	SBI  0x15,4
         ;     192 	RESET = 0;
0000d2 98ad      	CBI  0x15,5
         ;     193 }
0000d3 9508      	RET
         ;     194 
         ;     195 inline
         ;     196 void
         ;     197 spiWriteEnable(
         ;     198 )
         ;     199 {
          _spiWriteEnable:
         ;     200     char i, command = 6;   //write enable
         ;     201 	CS = 0;
0000d4 931a      	ST   -Y,R17
0000d5 930a      	ST   -Y,R16
         ;	i -> R16
         ;	command -> R17
0000d6 e016      	LDI  R17,6
0000d7 98a8      	CBI  0x15,0
         ;     202 	SPI_TX(i, 8, command);
0000d8 e000      	LDI  R16,LOW(0)
          _0xD:
0000d9 3008      	CPI  R16,8
0000da f438      	BRSH _0xE
0000db 940e 0240 	CALL SUBOPT_0x0
0000dd 9aa9      	SBI  0x15,1
0000de 0000      	nop
0000df 98a9      	CBI  0x15,1
0000e0 5f0f      	SUBI R16,-LOW(1)
0000e1 cff7      	RJMP _0xD
          _0xE:
         ;     203 	CS = 1;
0000e2 9aa8      	SBI  0x15,0
         ;     204 }
0000e3 9109      	LD   R16,Y+
0000e4 9119      	LD   R17,Y+
0000e5 9508      	RET
         ;     205 
         ;     206 inline
         ;     207 void
         ;     208 spiWrite8(
         ;     209 	long address,
         ;     210 	char data
         ;     211 )
         ;     212 {
         ;     213 	char i, command = 2;
         ;     214 	CS = 0;
         ;	address -> Y+3
         ;	data -> Y+2
         ;	i -> R16
         ;	command -> R17
         ;     215 	address <<= 8;
         ;     216 	SPI_TX(i, 8, command);
         ;     217 	SPI_TX(i, 24, address);
         ;     218 	SPI_TX(i, 8, data);
         ;     219 	CS = 1;
         ;     220 	delay_us(100);
         ;     221 }
         ;     222 
         ;     223 inline
         ;     224 void
         ;     225 spiWriteBlock(
         ;     226 	long address,
         ;     227 	char *pBlock,
         ;     228 	char blockSize
         ;     229 )
         ;     230 {
          _spiWriteBlock:
         ;     231 	char i, b, command = 2, dt;
         ;     232 	CS = 0;
0000e6 940e 02b1 	CALL __SAVELOCR4
         ;	address -> Y+7
         ;	*pBlock -> Y+5
         ;	blockSize -> Y+4
         ;	i -> R16
         ;	b -> R17
         ;	command -> R18
         ;	dt -> R19
0000e8 e022      	LDI  R18,2
0000e9 98a8      	CBI  0x15,0
         ;     233 	address <<= 8;
0000ea   +  	__GETD2S 7
0000ee e0e8      	LDI  R30,LOW(8)
0000ef 940e 028e 	CALL __LSLD12
0000f1   +  	__PUTD1S 7
         ;     234 	SPI_TX(i, 8, command);
0000f5 e000      	LDI  R16,LOW(0)
          _0x25:
0000f6 3008      	CPI  R16,8
0000f7 f440      	BRSH _0x26
0000f8 0f22      	LSL  R18
0000f9 940e 024a 	CALL SUBOPT_0x1
0000fb 9aa9      	SBI  0x15,1
0000fc 0000      	nop
0000fd 98a9      	CBI  0x15,1
0000fe 5f0f      	SUBI R16,-LOW(1)
0000ff cff6      	RJMP _0x25
          _0x26:
         ;     235 	SPI_TX(i, 24, address);
000100 e000      	LDI  R16,LOW(0)
          _0x2B:
000101 3108      	CPI  R16,24
000102 f488      	BRSH _0x2C
000103   +  	__GETD1S 7
000107 940e 029a 	CALL __LSLD1
000109   +  	__PUTD1S 7
00010d 940e 024a 	CALL SUBOPT_0x1
00010f 9aa9      	SBI  0x15,1
000110 0000      	nop
000111 98a9      	CBI  0x15,1
000112 5f0f      	SUBI R16,-LOW(1)
000113 cfed      	RJMP _0x2B
          _0x2C:
         ;     236 	for (b = 0; b < blockSize; ++b) {
000114 e010      	LDI  R17,LOW(0)
          _0x2E:
000115 81ec      	LDD  R30,Y+4
000116 171e      	CP   R17,R30
000117 f4a0      	BRSH _0x2F
         ;     237 		dt = *(pBlock + b);
000118 2fe1      	MOV  R30,R17
000119 81ad      	LDD  R26,Y+5
00011a 81be      	LDD  R27,Y+5+1
00011b e0f0      	LDI  R31,0
00011c 0fae      	ADD  R26,R30
00011d 1fbf      	ADC  R27,R31
00011e 913c      	LD   R19,X
         ;     238 		SPI_TX(i, 8, dt);
00011f e000      	LDI  R16,LOW(0)
          _0x34:
000120 3008      	CPI  R16,8
000121 f440      	BRSH _0x35
000122 0f33      	LSL  R19
000123 940e 024a 	CALL SUBOPT_0x1
000125 9aa9      	SBI  0x15,1
000126 0000      	nop
000127 98a9      	CBI  0x15,1
000128 5f0f      	SUBI R16,-LOW(1)
000129 cff6      	RJMP _0x34
          _0x35:
         ;     239 	}
00012a 5f1f      	SUBI R17,-LOW(1)
00012b cfe9      	RJMP _0x2E
          _0x2F:
         ;     240 	CS = 1;
00012c 9aa8      	SBI  0x15,0
         ;     241 	delay_us(100);
00012d   +  	__DELAY_USW 300
         ;     242 }
000131 940e 02b6 	CALL __LOADLOCR4
000133 962b      	ADIW R28,11
000134 9508      	RET
         ;     243 
         ;     244 inline
         ;     245 char
         ;     246 spiRead8(
         ;     247 	long address
         ;     248 )
         ;     249 {
          _spiRead8:
         ;     250 	char i, command = 3, result = 0;
         ;     251 	CS = 0;
000135 940e 02b2 	CALL __SAVELOCR3
         ;	address -> Y+3
         ;	i -> R16
         ;	command -> R17
         ;	result -> R18
000137 e013      	LDI  R17,3
000138 e020      	LDI  R18,0
000139 98a8      	CBI  0x15,0
         ;     252 	address <<= 8;
00013a   +  	__GETD2S 3
00013e e0e8      	LDI  R30,LOW(8)
00013f 940e 028e 	CALL __LSLD12
000141   +  	__PUTD1S 3
         ;     253 	SPI_TX(i, 8, command);
000145 e000      	LDI  R16,LOW(0)
          _0x3A:
000146 3008      	CPI  R16,8
000147 f438      	BRSH _0x3B
000148 940e 0240 	CALL SUBOPT_0x0
00014a 9aa9      	SBI  0x15,1
00014b 0000      	nop
00014c 98a9      	CBI  0x15,1
00014d 5f0f      	SUBI R16,-LOW(1)
00014e cff7      	RJMP _0x3A
          _0x3B:
         ;     254 	SPI_TX(i, 24, address);
00014f e000      	LDI  R16,LOW(0)
          _0x40:
000150 3108      	CPI  R16,24
000151 f488      	BRSH _0x41
000152   +  	__GETD1S 3
000156 940e 029a 	CALL __LSLD1
000158   +  	__PUTD1S 3
00015c 940e 024a 	CALL SUBOPT_0x1
00015e 9aa9      	SBI  0x15,1
00015f 0000      	nop
000160 98a9      	CBI  0x15,1
000161 5f0f      	SUBI R16,-LOW(1)
000162 cfed      	RJMP _0x40
          _0x41:
         ;     255 	for (i = 0; i < 8; ++i) {
000163 e000      	LDI  R16,LOW(0)
          _0x43:
000164 3008      	CPI  R16,8
000165 f438      	BRSH _0x44
         ;     256 		SCK = 1;
000166 9aa9      	SBI  0x15,1
         ;     257 		result <<= 1;
000167 0f22      	LSL  R18
         ;     258 		if (SI)
000168 999b      	SBIC 0x13,3
         ;     259 			++result;
000169 5f2f      	SUBI R18,-LOW(1)
         ;     260 		SCK = 0;
00016a 98a9      	CBI  0x15,1
         ;     261 	}
00016b 5f0f      	SUBI R16,-LOW(1)
00016c cff7      	RJMP _0x43
          _0x44:
         ;     262 	CS = 1;
00016d 9aa8      	SBI  0x15,0
         ;     263 	return result;
00016e 2fe2      	MOV  R30,R18
00016f 940e 02b7 	CALL __LOADLOCR3
000171 9627      	ADIW R28,7
000172 9508      	RET
         ;     264 }
         ;     265 
         ;     266 inline
         ;     267 char
         ;     268 spiReadStatus(
         ;     269 )
         ;     270 {
         ;     271     char i, res = 5;
         ;     272 	CS = 0;
         ;	i -> R16
         ;	res -> R17
         ;     273 	SPI_TX(i, 8, res);
         ;     274 	for (i = 0; i < 8; ++i) {
         ;     275 		SCK = 1;
         ;     276 		res <<= 1;
         ;     277 		if (SI)
         ;     278 			++res;
         ;     279 		SCK = 0;
         ;     280 	}
         ;     281 	CS = 1;
         ;     282     return res;
         ;     283 }
         ;     284 
         ;     285 inline
         ;     286 void
         ;     287 spiChipErase(
         ;     288 )
         ;     289 {
          _spiChipErase:
         ;     290     char i, command = 0x62;
         ;     291 	CS = 0;
000173 931a      	ST   -Y,R17
000174 930a      	ST   -Y,R16
         ;	i -> R16
         ;	command -> R17
000175 e612      	LDI  R17,98
000176 98a8      	CBI  0x15,0
         ;     292 	SPI_TX(i, 8, command);
000177 e000      	LDI  R16,LOW(0)
          _0x54:
000178 3008      	CPI  R16,8
000179 f438      	BRSH _0x55
00017a 940e 0240 	CALL SUBOPT_0x0
00017c 9aa9      	SBI  0x15,1
00017d 0000      	nop
00017e 98a9      	CBI  0x15,1
00017f 5f0f      	SUBI R16,-LOW(1)
000180 cff7      	RJMP _0x54
          _0x55:
         ;     293 	CS = 1;
000181 9aa8      	SBI  0x15,0
         ;     294 	delay_ms(5000);
000182 e8e8      	LDI  R30,LOW(5000)
000183 e1f3      	LDI  R31,HIGH(5000)
000184 93fa      	ST   -Y,R31
000185 93ea      	ST   -Y,R30
000186 940e 027d 	CALL _delay_ms
         ;     295 }
000188 9109      	LD   R16,Y+
000189 9119      	LD   R17,Y+
00018a 9508      	RET
         ;     296 
         ;     297 inline
         ;     298 char
         ;     299 spiBlankChecking(
         ;     300 )
         ;     301 {
          _spiBlankChecking:
         ;     302 	long addr = 0;
         ;     303 	for (; addr < 65536 && spiRead8(addr) == 0xFF; ++addr) ;
00018b 9724      	SBIW R28,4
00018c e084      	LDI  R24,4
00018d e0a0      	LDI  R26,LOW(0)
00018e e0b0      	LDI  R27,HIGH(0)
00018f e5e4      	LDI  R30,LOW(_0x56*2)
000190 e0f0      	LDI  R31,HIGH(_0x56*2)
000191 940e 02bb 	CALL __INITLOCB
         ;	addr -> Y+0
          _0x58:
000193   +  	__GETD2S 0
000197   +  	__CPD2N 0x10000
00019e f424      	BRGE _0x5A
00019f 940e 0253 	CALL SUBOPT_0x2
0001a1 3fef      	CPI  R30,LOW(0xFF)
0001a2 f009      	BREQ _0x5B
          _0x5A:
0001a3 c00d      	RJMP _0x59
          _0x5B:
0001a4   +  	__GETD1S 0
0001a8   +  	__SUBD1N -1
0001ac   +  	__PUTD1S 0
0001b0 cfe2      	RJMP _0x58
          _0x59:
         ;     304 	return addr == 65536;
0001b1   +  	__GETD2S 0
0001b5   +  	__GETD1N 0x10000
0001b9 940e 029f 	CALL __EQD12
0001bb 9624      	ADIW R28,4
0001bc 9508      	RET
         ;     305 }
         ;     306 
         ;     307 inline
         ;     308 void
         ;     309 resetBlackfin(
         ;     310 )
         ;     311 {
          _resetBlackfin:
         ;     312 	LNE = 0;		//load enable  
0001bd 98ac      	CBI  0x15,4
         ;     313 	DDRC = 0x30;	//disable program spi
0001be e3e0      	LDI  R30,LOW(48)
0001bf bbe4      	OUT  0x14,R30
         ;     314 	UCSRB=0x00;		//disable uart
0001c0 e0e0      	LDI  R30,LOW(0)
0001c1 b9ea      	OUT  0xA,R30
         ;     315 	RESET = 0;		//reset
0001c2 98ad      	CBI  0x15,5
         ;     316     delay_ms(1000);	//delay
0001c3 eee8      	LDI  R30,LOW(1000)
0001c4 e0f3      	LDI  R31,HIGH(1000)
0001c5 93fa      	ST   -Y,R31
0001c6 93ea      	ST   -Y,R30
0001c7 940e 027d 	CALL _delay_ms
         ;     317     RESET = 1;		//starting Blackfin
0001c9 9aad      	SBI  0x15,5
         ;     318 }
0001ca 9508      	RET
         ;     319 
         ;     320 void
         ;     321 main(
         ;     322 )
         ;     323 {
          _main:
         ;     324     char cmd, blockSize, exit = 0;
         ;     325     long addr;
         ;     326 
         ;     327     init();
0001cb 9724      	SBIW R28,4
         ;	cmd -> R16
         ;	blockSize -> R17
         ;	exit -> R18
         ;	addr -> Y+0
0001cc e020      	LDI  R18,0
0001cd 940e 00a1 	CALL _init
         ;     328 	#asm("sei")
0001cf 9478      	sei
         ;     329     if (PRGE) {
0001d0 9b83      	SBIS 0x10,3
0001d1 c05e      	RJMP _0x5C
         ;     330 #ifdef __DEBUG__
         ;     331         printf("Program enable\r\n");
         ;     332 #endif  /*__DEBUG__*/
         ;     333 		do {
          _0x5E:
         ;     334 			cmd = receiveByte();
0001d2 940e 0088 	CALL _receiveByte
0001d4 2f0e      	MOV  R16,R30
         ;     335 			switch(cmd) {
0001d5 2fe0      	MOV  R30,R16
         ;     336 				case LC_ERASE:
0001d6 31e0      	CPI  R30,LOW(0x10)
0001d7 f439      	BRNE _0x63
         ;     337 				    spiWriteEnable();
0001d8 940e 00d4 	CALL _spiWriteEnable
         ;     338 					spiChipErase();
0001da 940e 0173 	CALL _spiChipErase
         ;     339 					putchar(0x55);	//ack
0001dc 940e 025b 	CALL SUBOPT_0x3
         ;     340 					break;
0001de c04e      	RJMP _0x62
         ;     341 				case LC_LOAD:
          _0x63:
0001df 31e1      	CPI  R30,LOW(0x11)
0001e0 f521      	BRNE _0x64
         ;     342 					blockSize = receiveByte();
0001e1 940e 0088 	CALL _receiveByte
0001e3 2f1e      	MOV  R17,R30
         ;     343 					addr = receiveByte();				//low address byte
0001e4 940e 025f 	CALL SUBOPT_0x4
         ;     344 					addr |= ((long)receiveByte()) << 8;	//high address byte
         ;     345 					flushRxBuffer();
0001e6 940e 0081 	CALL _flushRxBuffer
         ;     346 					putchar(0x55);	//ack
0001e8 940e 025b 	CALL SUBOPT_0x3
         ;     347 					while (g_uRxCount < blockSize) ;
          _0x65:
0001ea 2fe1      	MOV  R30,R17
0001eb   +  	__GETW2R 6,7
0001ed e0f0      	LDI  R31,0
0001ee 17ae      	CP   R26,R30
0001ef 07bf      	CPC  R27,R31
0001f0 f3c8      	BRLO _0x65
         ;     348 					spiWriteEnable();
0001f1 940e 00d4 	CALL _spiWriteEnable
         ;     349 					spiWriteBlock(addr, g_pbRxBuffer, blockSize);
0001f3   +  	__GETD1S 0
0001f7 940e 02a7 	CALL __PUTPARD1
0001f9 e6e0      	LDI  R30,LOW(_g_pbRxBuffer)
0001fa e0f1      	LDI  R31,HIGH(_g_pbRxBuffer)
0001fb 93fa      	ST   -Y,R31
0001fc 93ea      	ST   -Y,R30
0001fd 931a      	ST   -Y,R17
0001fe 940e 00e6 	CALL _spiWriteBlock
         ;     350 					flushRxBuffer();
000200 940e 0081 	CALL _flushRxBuffer
         ;     351 					putchar(0x55);	//ack
000202 940e 025b 	CALL SUBOPT_0x3
         ;     352 					break;
000204 c028      	RJMP _0x62
         ;     353 				case LC_RESET_CHIP:
          _0x64:
000205 31e2      	CPI  R30,LOW(0x12)
000206 f421      	BRNE _0x68
         ;     354 					putchar(0x55);	//ack
000207 940e 025b 	CALL SUBOPT_0x3
         ;     355 					exit = 1;
000209 e021      	LDI  R18,LOW(1)
         ;     356 					break;
00020a c022      	RJMP _0x62
         ;     357 				case LC_BLANK_CHECKING:
          _0x68:
00020b 31e3      	CPI  R30,LOW(0x13)
00020c f459      	BRNE _0x69
         ;     358 					putchar(spiBlankChecking()? 0x55: 0xff);
00020d 940e 018b 	CALL _spiBlankChecking
00020f 30e0      	CPI  R30,0
000210 f011      	BREQ _0x6A
000211 e5e5      	LDI  R30,LOW(85)
000212 c001      	RJMP _0x6B
          _0x6A:
000213 efef      	LDI  R30,LOW(255)
          _0x6B:
000214 93ea      	ST   -Y,R30
000215 940e 023a 	CALL _putchar
         ;     359 					break;
000217 c015      	RJMP _0x62
         ;     360 				case LC_READ:
          _0x69:
000218 31e4      	CPI  R30,LOW(0x14)
000219 f451      	BRNE _0x6E
         ;     361 					addr = receiveByte();				//low address byte
00021a 940e 025f 	CALL SUBOPT_0x4
         ;     362 					addr |= ((long)receiveByte()) << 8;	//high address byte
         ;     363 					putchar(0x55);	//ack
00021c 940e 025b 	CALL SUBOPT_0x3
         ;     364 					putchar(spiRead8(addr));
00021e 940e 0253 	CALL SUBOPT_0x2
000220 93ea      	ST   -Y,R30
000221 940e 023a 	CALL _putchar
         ;     365 					break;
000223 c009      	RJMP _0x62
         ;     366 				default:
          _0x6E:
         ;     367 					flushRxBuffer();
000224 940e 0081 	CALL _flushRxBuffer
         ;     368 					putchar(0xfe);	//error
000226 efee      	LDI  R30,LOW(254)
000227 93ea      	ST   -Y,R30
000228 940e 023a 	CALL _putchar
         ;     369 					putchar(cmd);
00022a 930a      	ST   -Y,R16
00022b 940e 023a 	CALL _putchar
         ;     370 					break;
         ;     371 			}
          _0x62:
         ;     372 		} while (!exit);
00022d 3020      	CPI  R18,0
00022e f409      	BRNE _0x5F
00022f cfa2      	RJMP _0x5E
          _0x5F:
         ;     373     }
         ;     374     else {
          _0x5C:
         ;     375 #ifdef __DEBUG__
         ;     376         printf("Program disable\r\n");
         ;     377 #endif  /*__DEBUG__*/
         ;     378         
         ;     379     }
         ;     380 	#asm("cli");
000230 94f8      	cli
         ;     381     //idle mode
         ;     382 	resetBlackfin();
000231 940e 01bd 	CALL _resetBlackfin
         ;     383     //TODO: sleep mode after running blackfin
         ;     384     while (1) {
          _0x70:
         ;     385     }
000233 cfff      	RJMP _0x70
         ;     386 }
000234 9624      	ADIW R28,4
          _0x73:
000235 cfff      	RJMP _0x73
         
          _getchar:
000236 9b5f           sbis usr,rxc
000237 cffe           rjmp _getchar
000238 b1ec           in   r30,udr
000239 9508      	RET
          _putchar:
00023a 9b5d           sbis usr,udre
00023b cffe           rjmp _putchar
00023c 81e8           ld   r30,y
00023d b9ec           out  udr,r30
00023e 9621      	ADIW R28,1
00023f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x0:
000240 0f11      	LSL  R17
000241 e0e1      	LDI  R30,1
000242 f008      	BRBS 0x0,PC+2
000243 e0e0      	LDI  R30,0
000244 940e 02ac 	CALL __BSTB1
000246 b3a5      	IN   R26,0x15
000247 f9a2      	BLD  R26,2
000248 bba5      	OUT  0x15,R26
000249 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x1:
00024a e0e1      	LDI  R30,1
00024b f008      	BRBS 0x0,PC+2
00024c e0e0      	LDI  R30,0
00024d 940e 02ac 	CALL __BSTB1
00024f b3a5      	IN   R26,0x15
000250 f9a2      	BLD  R26,2
000251 bba5      	OUT  0x15,R26
000252 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2:
000253   +  	__GETD1S 0
000257 940e 02a7 	CALL __PUTPARD1
000259 940c 0135 	JMP  _spiRead8
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x3:
00025b e5e5      	LDI  R30,LOW(85)
00025c 93ea      	ST   -Y,R30
00025d 940c 023a 	JMP  _putchar
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4:
00025f 940e 0088 	CALL _receiveByte
000261 27ff      	CLR  R31
000262 2766      	CLR  R22
000263 2777      	CLR  R23
000264   +  	__PUTD1S 0
000268 940e 0088 	CALL _receiveByte
00026a 27ff      	CLR  R31
00026b 2766      	CLR  R22
00026c 2777      	CLR  R23
00026d 01df      	MOVW R26,R30
00026e 01cb      	MOVW R24,R22
00026f e0e8      	LDI  R30,LOW(8)
000270 940e 028e 	CALL __LSLD12
000272   +  	__GETD2S 0
000276 940e 0289 	CALL __ORD12
000278   +  	__PUTD1S 0
00027c 9508      	RET
         
          _delay_ms:
00027d 91e9      	ld   r30,y+
00027e 91f9      	ld   r31,y+
00027f 9630      	adiw r30,0
000280 f039      	breq __delay_ms1
          __delay_ms0:
000281   +  	__DELAY_USW 0xBB8
000285 95a8      	wdr
000286 9731      	sbiw r30,1
000287 f7c9      	brne __delay_ms0
          __delay_ms1:
000288 9508      	ret
         
          __ORD12:
000289 2bea      	OR   R30,R26
00028a 2bfb      	OR   R31,R27
00028b 2b68      	OR   R22,R24
00028c 2b79      	OR   R23,R25
00028d 9508      	RET
         
          __LSLD12:
00028e 23ee      	TST  R30
00028f 2e0e      	MOV  R0,R30
000290 01fd      	MOVW R30,R26
000291 01bc      	MOVW R22,R24
000292 f031      	BREQ __LSLD12R
          __LSLD12L:
000293 0fee      	LSL  R30
000294 1fff      	ROL  R31
000295 1f66      	ROL  R22
000296 1f77      	ROL  R23
000297 940a      	DEC  R0
000298 f7d1      	BRNE __LSLD12L
          __LSLD12R:
000299 9508      	RET
         
          __LSLD1:
00029a 0fee      	LSL  R30
00029b 1fff      	ROL  R31
00029c 1f66      	ROL  R22
00029d 1f77      	ROL  R23
00029e 9508      	RET
         
          __EQD12:
00029f 17ea      	CP   R30,R26
0002a0 07fb      	CPC  R31,R27
0002a1 0768      	CPC  R22,R24
0002a2 0779      	CPC  R23,R25
0002a3 e0e1      	LDI  R30,1
0002a4 f009      	BREQ __EQD12T
0002a5 27ee      	CLR  R30
          __EQD12T:
0002a6 9508      	RET
         
          __PUTPARD1:
0002a7 937a      	ST   -Y,R23
0002a8 936a      	ST   -Y,R22
0002a9 93fa      	ST   -Y,R31
0002aa 93ea      	ST   -Y,R30
0002ab 9508      	RET
         
          __BSTB1:
0002ac 94e8      	CLT
0002ad 2400      	CLR  R0
0002ae 11e0      	CPSE R30,R0
0002af 9468      	SET
0002b0 9508      	RET
         
          __SAVELOCR4:
0002b1 933a      	ST   -Y,R19
          __SAVELOCR3:
0002b2 932a      	ST   -Y,R18
          __SAVELOCR2:
0002b3 931a      	ST   -Y,R17
0002b4 930a      	ST   -Y,R16
0002b5 9508      	RET
         
          __LOADLOCR4:
0002b6 813b      	LDD  R19,Y+3
          __LOADLOCR3:
0002b7 812a      	LDD  R18,Y+2
          __LOADLOCR2:
0002b8 8119      	LDD  R17,Y+1
0002b9 8108      	LD   R16,Y
0002ba 9508      	RET
         
          __INITLOCB:
          __INITLOCW:
0002bb 0fac      	ADD R26,R28
0002bc 1fbd      	ADC R27,R29
          __INITLOC0:
0002bd 9005      	LPM  R0,Z+
0002be 920d      	ST   X+,R0
0002bf 958a      	DEC  R24
0002c0 f7e1      	BRNE __INITLOC0
0002c1 9508      	RET
         
         ;END OF CODE MARKER
          __END_OF_CODE:

Assembly complete with no errors.
